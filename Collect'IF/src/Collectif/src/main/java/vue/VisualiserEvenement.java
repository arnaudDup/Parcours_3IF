/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vue;

import java.awt.Color;
import java.awt.Component;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import metier.modele.Activite;
import metier.modele.Adherent;
import metier.modele.Evenement;
import metier.modele.EvenementAvecEquipe;
import metier.modele.EvenementSansEquipe;
import metier.service.ServicesMetier;
import util.Constante;

/**
 *
 * @author Antoine
 */
public class VisualiserEvenement extends javax.swing.JFrame {
    ServicesMetier service = new ServicesMetier();
    DefaultListModel<Evenement> modelEventList = new javax.swing.DefaultListModel<Evenement>();
    DefaultListModel<String> modelEquipeA = new javax.swing.DefaultListModel<String>();
    DefaultListModel<String> modelEquipeB = new javax.swing.DefaultListModel<String>();
    /**
     * Creates new form VisualiserEvenement
     */
    public VisualiserEvenement() {
        
        
        initComponents();
        // Gestion de la liste d'évent
        Evenement_List.setCellRenderer(new MyEventRenderer());        
        List<Evenement> events = service.getEvenements();        
        for(Evenement e : events)
            modelEventList.addElement(e);                
        
        // On cache les listes de participants        
        equipe1_List.setVisible(false);
        equipe2_List.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Evenement_List = new javax.swing.JList<Evenement>();
        jScrollPane2 = new javax.swing.JScrollPane();
        equipe1_List = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        equipe2_List = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        equipe1_Lab = new javax.swing.JLabel();
        equipe2_Lab = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lieu_TF = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Visualiser évènements");
        setResizable(false);
        setSize(new java.awt.Dimension(724, 297));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Evenement_List.setModel(modelEventList);
        Evenement_List.setVerifyInputWhenFocusTarget(false);
        Evenement_List.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Evenement_ListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(Evenement_List);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 98, 190, 140));

        equipe1_List.setModel(modelEquipeA);
        jScrollPane2.setViewportView(equipe1_List);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(337, 98, 117, -1));

        equipe2_List.setModel(modelEquipeB);
        jScrollPane3.setViewportView(equipe2_List);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(525, 98, 118, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Evènements");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 57, -1, -1));

        equipe1_Lab.setText("Equipe 1");
        getContentPane().add(equipe1_Lab, new org.netbeans.lib.awtextra.AbsoluteConstraints(337, 78, -1, -1));

        equipe2_Lab.setText("Equipe 2");
        getContentPane().add(equipe2_Lab, new org.netbeans.lib.awtextra.AbsoluteConstraints(525, 78, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Participants");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(337, 57, -1, -1));

        jLabel3.setText("Lieu :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, -1));

        lieu_TF.setText("-");
        getContentPane().add(lieu_TF, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    // Lorsqu'il y a une selection d'évènement
    private void Evenement_ListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Evenement_ListValueChanged
        // TODO add your handling code here:
        Evenement e = Evenement_List.getSelectedValue();
        modelEquipeA.clear();
        modelEquipeB.clear();       
        equipe1_Lab.setVisible(false);
        equipe2_Lab.setVisible(false);
        
        if(e.getLieu() != null)
            lieu_TF.setText(e.getLieu().getDenomination());
        
        if(e.getActivite().isParEquipe()) // si e est par équipe, on ajoute les équipes aux deux listes
        {
            EvenementAvecEquipe eventEquipe = (EvenementAvecEquipe) e;

            
            // On rempli la liste de l'équipe A
            for(Adherent a :eventEquipe.getEquipeA().getAdherents())
                modelEquipeA.addElement(a.getId()+": "+a.getNom());
            
            // Puis celle de l'équipe B
            for(Adherent a :eventEquipe.getEquipeB().getAdherents())
                modelEquipeB.addElement(a.getId()+": "+a.getNom());
            
            // Puis on affiche les deux listes et leur labels
            equipe1_List.setVisible(true);
            equipe2_List.setVisible(true);
            equipe1_Lab.setVisible(true);
            equipe2_Lab.setVisible(true);
        }
        else
        {
            EvenementSansEquipe eventSansEquipe = (EvenementSansEquipe) e;
            equipe1_List.setVisible(true);
            equipe2_List.setVisible(false);
            
            for(Adherent a :eventSansEquipe.getParticipant())
                modelEquipeA.addElement(a.getId()+": "+a.getNom());

        }
         
        
    }//GEN-LAST:event_Evenement_ListValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualiserEvenement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualiserEvenement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualiserEvenement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualiserEvenement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VisualiserEvenement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<Evenement> Evenement_List;
    private javax.swing.JLabel equipe1_Lab;
    private javax.swing.JList<String> equipe1_List;
    private javax.swing.JLabel equipe2_Lab;
    private javax.swing.JList<String> equipe2_List;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lieu_TF;
    // End of variables declaration//GEN-END:variables
}

class MyEventRenderer extends JLabel implements ListCellRenderer {

    @Override
    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        Evenement e = (Evenement) value;
        
        this.setText(e.getActivite().getDenomination()+" le "+Constante.FormatDate(e.getDate()) );
        
        
        if(isSelected)
        {
            this.setOpaque(true);
            this.setBackground(Color.LIGHT_GRAY);
        }
        else
            this.setOpaque(false);
            
        
          
            
        return this;
    }
}